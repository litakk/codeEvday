// EASY
// ARRAY PROTOTYPE-LAST

/**
 * @return {null|boolean|number|string|Array|Object}
 */
Array.prototype.last = function () {
  return this.length > 0 ? this[this.length - 1] : -1;
};

/**
 * const arr = [1, 2, 3];
 * arr.last(); // 3
 */

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function maxSum(arr) {
  let result = 0;

  for (let i = 0; i < arr.length; i++) {
    if (result <= arr[i]) {
      result = arr[i];
    }
  }
  console.log(result);
}

// maxSum([2, 1, 3, 5, 4]);

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Task: Palindrom

function Palindrom(str) {
  let replace = str.split("").reverse().join("");

  if (str === replace) {
    console.log(str + " is palindrom");
  } else {
    console.log(str + " is not palindrom");
  }
}
// Palindrom("madam");

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function IsAnagram(arg1, arg2) {
  let sort1 = arg1.split("").sort().join("");
  let sort2 = arg2.split("").sort().join("");
  return sort1 == sort2;
}
// console.log(IsAnagram("listen", "silent")); // true
// console.log(IsAnagram("hello", "world")); // false

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function range(start, end) {
  const result = [];

  if (start > end) {
    return result;
  }

  for (let i = start; i <= end; i++) {
    result.push(i);
  }
  return result;
}
// console.log(range(0, 5)); // [0, 1, 2, 3, 4, 5]
// console.log(range(3, 3)); // [3]
// console.log(range(8, 0)); // [ ]
// console.log(range(0, 0)); // [0]

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function evenRange(start, end) {
  const res = [];

  if (start > end) {
    return res;
  }

  for (let i = start; i <= end; i++) {
    if (i % 2 === 0) {
      res.push(i);
    }
  }
  return res;
}
// console.log(evenRange(0, 5));

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function sumMultiplesOf3Or5(number) {
  let res = 0;

  for (let i = 0; i <= number; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      res += i;
    }
  }
  return res;
}
// console.log(sumMultiplesOf3Or5(10));\

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –∏—Ö –ø–µ—Ä–≤–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è.

function uniqueValues(arr) {
  let ress = [];

  for (let i = 0; i < arr.length; i++) {
    if (!ress.includes(arr[i])) {
      ress.push(arr[i]);
    }
  }
  return ress;
}

// console.log(uniqueValues([1, 2, 2, 3, 4, 4, 5]));
// console.log(uniqueValues(["a", "b", "a", "c", "b"]));
uniqueValues([]); // []

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// en: Sum of array elements
// ru: –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞

function Acc(arr) {
  let result = 0;

  for (let i = 0; i < arr.length; i++) {
    result += arr[i];
  }

  return result;
}

console.log(Acc([1, 2, 3])); // ‚Üí 6

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// containsDuplicate
// –µ—Å–ª–∏ 1 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞ –≤–µ—Ä–Ω–∏ true –∞ –µ—Å–ª–∏ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–æ –≤–µ—Ä–Ω–∏ false

const containsDuplicate = (nums) => {
  let seen = new Set();

  for (let num of nums) {
    if (seen.has(num)) {
      return true;
    }
    seen.add(num);
  }
  return false;
};
console.log(containsDuplicate([1, 2, 3, 1]));

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// isAnagram
// s = "rat", t = "car"

function isAnagram(s, t) {
  return s.split("").sort().join("") === t.split("").sort().join("");
}
console.log(isAnagram("car", "car"));

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// isPalindrome

function isPalindrome(x) {
  return x.toString().split("").reverse().join("") === x.toString();
}
console.log(isPalindrome(121));

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// –¢–µ–±–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø –º–∞—Å—Å–∏–≤–∞ (Array.prototype) –º–µ—Ç–æ–¥ last, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç:
// –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞,
// –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å -1.

Array.prototype.last = function () {
  return this.length > 0 ? this[this.length - 1] : -1;
};
const arr1 = [1, 2, 3];
console.log(arr1.last()); // üëâ 3

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// üìå –£—Å–ª–æ–≤–∏–µ:
// –î–∞–Ω –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª nums –∏ —á–∏—Å–ª–æ target.
// –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ target.
// –ö–∞–∂–¥—ã–π –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–º–µ–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ.
// –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —ç–ª–µ–º–µ–Ω—Ç –¥–≤–∞–∂–¥—ã.
// –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ–≤–∞–∂–µ–Ω (–æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤ –º–∞—Å—Å–∏–≤–µ [i, j]).

// (nums, target)
// nums = [2, 7, 11, 15], target = 9
// 2 + 7 = 9
// –æ—Ç–≤–µ—Ç: [0, 1]

function TwoSum(nums, target) {
  let seen = new Map();

  for (let i = 0; i < nums.length; i++) {
    let num = nums[i];
    let result = target - num;

    if (seen.has(result)) {
      return [seen.get(result), i];
    }
    seen.set(num, i);
  }
  return [];
}
console.log(TwoSum([1, 2, 7, 3, 3, 2], 9));

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –µ—Å—Ç—å—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —É–±—Ä–∞—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
// –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —Ç–æ –¥–æ–±–∞–≤–ª—è–π –∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∏–ø–∞–π

function Func(array) {
  let seen = new Set();
  let newArray = [];

  for (let num of array) {
    if (!seen.has(num)) {
      seen.add(num);
      newArray.push(num);
    }
  }
  return newArray;
}
console.log(Func([1, 1, 2, 2, 3, 3]));

// 1, 2, 3

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var groupAnagrams = function (strs) {
  let seen = new Map();

  for(let str of strs) {
    let key = str.split("").sort().join('')

    if(!seen.has(key)) {
      seen.set(key, [])
    }
    seen.get(key).push(str)
  }
};
console.log(groupAnagrams(["eat", "tea", "tan", "ate", "nat", "bat"]));

