// 1. Event Loop (–°–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª)
// --------------------------------
// JavaScript ‚Äî –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π, –Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π.
// Event Loop —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞, –ø–æ–∑–≤–æ–ª—è—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏,
// –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.

// üîπ –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞
// ---------------------------------------------------------
// | –ö–æ–Ω—Ü–µ–ø—Ü–∏—è       | –û–ø–∏—Å–∞–Ω–∏–µ                                      | –ü—Ä–∏–º–µ—Ä—ã                   |
// |----------------|---------------------------------|--------------------------|
// | –ü—Ä–æ–º–∏—Å—ã       | –û–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º | fetch, axios.get       |
// | Async/await   | –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º–∏—Å–∞–º–∏          | API-–∑–∞–ø—Ä–æ—Å—ã            |
// | –°–æ–±—ã—Ç–∏—è       | –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è   | addEventListener       |

// --------------------------------
// üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ setTimeout

const wait = (ms, callback) => {
  setTimeout(callback, ms);
};

console.log(1);
wait(0, () => console.log(2));
console.log(3);

// –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:
// 1
// 3
// 2 (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–µ–∫–∞ –≤—ã–∑–æ–≤–æ–≤)

// --------------------------------
// üîπ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

console.log("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã");

setTimeout(() => {
  console.log("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
}, 2000);

console.log("–ö–æ–Ω–µ—Ü –ø—Ä–æ–≥—Ä–∞–º–º—ã");

// --------------------------------
// üîπ Promise ‚Äî —Ä–∞–±–æ—Ç–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é

const promise = new Promise((resolve, reject) => {
  console.log("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ (pending)...");
  
  setTimeout(() => {
    if (Math.random() > 0.5) {
      resolve("‚úÖ –£—Å–ø–µ—Ö!");
    } else {
      reject("‚ùå –û—à–∏–±–∫–∞!");
    }
  }, 3000);
});

promise
  .then((data) => console.log("then:", data))
  .catch((error) => console.log("catch:", error))
  .finally(() => console.log("finally: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"));

// --------------------------------
// üîπ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Event Loop? (–ü—Ä–∏–º–µ—Ä)

console.log(1);

setTimeout(() => {
  console.log(2);
}, 0);

console.log(3);

// --------------------------------
// üîπ –†–∞–∑–±–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
// 1. –í —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ (Call Stack) –ø–æ–ø–∞–¥–∞–µ—Ç console.log(1) ‚Üí –í—ã–≤–æ–¥: 1
// 2. –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è setTimeout (–µ–≥–æ callback –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ Web APIs)
// 3. –í —Å—Ç–µ–∫ –ø–æ–ø–∞–¥–∞–µ—Ç console.log(3) ‚Üí –í—ã–≤–æ–¥: 3
// 4. –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –æ—á–∏—â–µ–Ω ‚Üí Event Loop –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç callback setTimeout –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ —Å—Ç–µ–∫
// 5. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è console.log(2) ‚Üí –í—ã–≤–æ–¥: 2

// –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥:
// 1
// 3
// 2

// --------------------------------
// üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Event Loop
// Call Stack (–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤) - –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥.
// Web APIs - —Ö—Ä–∞–Ω–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (setTimeout, HTTP-–∑–∞–ø—Ä–æ—Å—ã –∏ —Ç. –¥.).
// Callback Queue (–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤) - —Ö—Ä–∞–Ω–∏—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–µ–∫–∞.
// Microtask Queue (–û—á–µ—Ä–µ–¥—å –º–∏–∫—Ä–æ–∑–∞–¥–∞—á) - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–º–∏—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ Callback Queue.
// Event Loop - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ä—è–¥–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –∏ —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤.
// --------------------------------
