Переменные
var — функциональная область видимости, можно переопределять, всплывает (hoisting).

let — блочная область видимости, можно переопределять, не всплывает в инициализированном виде.

const — блочная область видимости, нельзя переопределять, значение должно быть задано сразу.zz

Hoisting
Поднятие объявлений переменных и функций в начало области видимости перед выполнением кода.

Типы данных
8 типов: number (числа), string (строки), boolean (true/false), null (пустое значение), undefined (не задано), symbol (уникальные значения), bigint (большие числа), object (объекты, массивы, функции).

Сравнения
== — сравнение с приведением типов ('5' == 5 → true).
=== — строгое сравнение без преобразований ('5' === 5 → false).

null vs undefined
null — специально задано "нет значения".
undefined — значение не было присвоено.

Truthy / Falsy
Falsy значения: false, 0, "", null, undefined, NaN. Всё остальное — truthy.

Неявное приведение типов
JS автоматически преобразует типы в нужный для операции ("5" * 2 → 10).

typeof
Оператор, возвращающий тип значения (typeof 5 → "number").
Особенность: typeof null → "object".

Работа с данными
Объект — коллекция пар ключ-значение, ключи — строки или символы.

Массив — упорядоченный список значений, индекс начинается с 0.

Деструктуризация — извлечение значений из объекта или массива в переменные.

Spread (...) — разворачивает массив или объект в новый.

Rest (...) — собирает оставшиеся элементы в массив.

JSON — текстовый формат для обмена данными (JSON.stringify, JSON.parse).

Map — хранит пары ключ-значение с любыми типами ключей.

Set — хранит уникальные значения любого типа.

WeakMap — ключи только объекты, удаляются сборщиком мусора.

WeakSet — хранит уникальные объекты, удаляются сборщиком мусора.

Shallow Copy — копирует только верхний уровень объекта.

Deep Copy — копирует все уровни вложенности.

Функции
Function Declaration — можно вызывать до объявления.

Function Expression — присваивается переменной, нельзя вызывать до объявления.

Arrow Function — компактный синтаксис, не имеет своего this и arguments.

this — контекст выполнения, определяется способом вызова.

call — вызывает функцию с указанным this и аргументами через запятую.

apply — то же самое, но аргументы передаются массивом.

bind — возвращает новую функцию с привязанным this.

Лексическое окружение — хранит переменные и ссылки на внешние области.

Замыкание — функция помнит переменные из внешней области даже после её завершения.

IIFE — функция, вызываемая сразу после объявления.

Pure Function — всегда возвращает один результат для одинаковых аргументов, без побочных эффектов.

Callback — функция, переданная другой функции для выполнения позже.

Асинхронность
Event Loop — механизм, управляющий порядком выполнения кода и задач.

Call Stack — стек вызовов функций, выполняет код по порядку.

Task Queue — очередь макрозадач (setTimeout, setInterval).

Microtask Queue — очередь микрозадач (Promise, MutationObserver).

Promise — объект для работы с асинхронным кодом (pending, fulfilled, rejected).

Async/Await — синтаксис для работы с промисами, пишется как синхронный код.

Callback Hell — сложность при вложенных коллбеках, решается промисами.

setTimeout — выполняет код с задержкой.

setInterval — выполняет код периодически с интервалом.

clearTimeout / clearInterval — отменяют выполнение таймеров.

fetch — встроенный API для HTTP-запросов, возвращает Promise.

ООП в JavaScript
Прототип — объект, от которого другие объекты наследуют свойства.

Прототипное наследование — получение свойств и методов через цепочку прототипов.

class — синтаксический сахар для работы с прототипами.

constructor — метод, вызываемый при создании объекта через new.

super — вызов конструктора родителя или родительского метода.

static — методы и свойства, доступные без создания экземпляра.

Разное
Symbol — уникальное и неизменяемое значение.

BigInt — числа произвольной длины (123n).

Strict mode — строгий режим, добавляет ограничения и меняет поведение.

Optional chaining (?.) — безопасный доступ к вложенным свойствам.

Nullish coalescing (??) — возвращает значение по умолчанию, если слева null или undefined.

Eval — выполняет строку как код (опасно).

Debounce — вызывает функцию только после паузы между вызовами.

Throttle — вызывает функцию не чаще заданного интервала.