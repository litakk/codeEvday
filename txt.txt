if...else:


if (condition) {
  // Код выполняется, если условие истинно
} else {
  // Код выполняется, если условие ложно
}
Тернарный оператор:


condition ? expressionIfTrue : expressionIfFalse;
Пример:


const x = 10;
const result = x > 5 ? "Больше пяти" : "Меньше или равно пяти";
console.log(result); // Больше пяти

-----------------------------------------------------------------------------------------------------------------------------------

Циклы: for, while, do...while, forEach, map, filter, reduce
for:


for (let i = 0; i < array.length; i++) {
  console.log(array[i]);
}
while:


let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}
do...while:


let j = 0;
do {
  console.log(j);
  j++;
} while (j < 5);
forEach:


array.forEach(item => {
  console.log(item);
});
map:


const doubledArray = array.map(item => item * 2);
filter:


const filteredArray = array.filter(item => item % 2 === 0);
reduce:


const sum = array.reduce((acc, curr) => acc + curr, 0);

-----------------------------------------------------------------------------------------------------------------------------------

Функции: объявление функций, анонимные функции, стрелочные функции, колбеки
Объявление функции:


function greet(name) {
  return `Привет, ${name}!`;
}
Анонимная функция:


const anonymousGreet = function(name) {
  return `Привет, ${name}!`;
};
Стрелочная функция:


const arrowGreet = name => `Привет, ${name}!`;
Колбеки:


array.forEach(item => {
  console.log(item);
});

-----------------------------------------------------------------------------------------------------------------------------------

Объекты и массивы: создание, доступ к свойствам, методы массивов
Создание объекта:


const person = {
  name: "Иван",
  age: 30,
  sayHello: function() {
    console.log(`Привет, меня зовут ${this.name}`);
  }
};
Доступ к свойствам:


console.log(person.name); // Иван
person.sayHello();        // Привет, меня зовут Иван
Методы массивов:


const numbers = [1, 2, 3];
numbers.push(4);          // Добавляем элемент в конец массива
console.log(numbers);     // [1, 2, 3, 4]
Классовые структуры: классы, конструкторы, наследование
Классы:


class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} говорит`);
  }
}

class Dog extends Animal {
  constructor(name, breed) {
    super(name);
    this.breed = breed;
  }

  bark() {
    console.log(`${this.name} лает`);
  }
}

const dog = new Dog("Шарик", "спаниель");
dog.speak();       // Шарик говорит
dog.bark();        // Шарик лает

-----------------------------------------------------------------------------------------------------------------------------------

Асинхронность: Промисы, Async/Await, Таймеры
Промисы:


const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Данные загружены"), 2000);
});

promise.then(data => {
  console.log(data); // Данные загружены
}).catch(error => {
  console.error(error);
});
Async/Await:


async function fetchData() {
  try {
    const response = await fetch('https://example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}

fetchData();
Таймеры:


setTimeout(() => {
  console.log("Через 2 секунды");
}, 2000);

let count = 0;
const interval = setInterval(() => {
  console.log(count++);
  if (count >= 5) clearInterval(interval);
}, 1000);

-----------------------------------------------------------------------------------------------------------------------------------

Работа с DOM

