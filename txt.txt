if...else:


if (condition) {
  // –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ
} else {
  // –ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ
}
–¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä:

let age = 18;

if (age >= 18) {
    console.log("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω");
}



condition ? expressionIfTrue : expressionIfFalse;
–ü—Ä–∏–º–µ—Ä:


const x = 10;
const result = x > 5 ? "–ë–æ–ª—å—à–µ –ø—è—Ç–∏" : "–ú–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –ø—è—Ç–∏";
console.log(result); // –ë–æ–ª—å—à–µ –ø—è—Ç–∏

-----------------------------------------------------------------------------------------------------------------------------------

–¶–∏–∫–ª—ã: for, while, do...while, forEach, map, filter, reduce
for:


for (let i = 0; i < array.length; i++) {
  console.log(array[i]);
}
while:


let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}
do...while:


let j = 0;
do {
  console.log(j);
  j++;
} while (j < 5);
forEach:


array.forEach(item => {
  console.log(item);
});
map:


const doubledArray = array.map(item => item * 2);
filter:


const filteredArray = array.filter(item => item % 2 === 0);
reduce:


const sum = array.reduce((acc, curr) => acc + curr, 0);

-----------------------------------------------------------------------------------------------------------------------------------

–§—É–Ω–∫—Ü–∏–∏: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ–ª–±–µ–∫–∏
–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:


function greet(name) {
  return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
}
–ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:


const anonymousGreet = function(name) {
  return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
};
–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:


const arrowGreet = name => `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
–ö–æ–ª–±–µ–∫–∏:


array.forEach(item => {
  console.log(item);
});

-----------------------------------------------------------------------------------------------------------------------------------

–û–±—ä–µ–∫—Ç—ã –∏ –º–∞—Å—Å–∏–≤—ã: —Å–æ–∑–¥–∞–Ω–∏–µ, –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º, –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤
–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:


const person = {
  name: "–ò–≤–∞–Ω",
  age: 30,
  sayHello: function() {
    console.log(`–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ${this.name}`);
  }
};
–î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º:


console.log(person.name); // –ò–≤–∞–Ω
person.sayHello();        // –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω
–ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤:


const numbers = [1, 2, 3];
numbers.push(4);          // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
console.log(numbers);     // [1, 2, 3, 4]
–ö–ª–∞—Å—Å–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –∫–ª–∞—Å—Å—ã, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
–ö–ª–∞—Å—Å—ã:


class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} –≥–æ–≤–æ—Ä–∏—Ç`);
  }
}

class Dog extends Animal {
  constructor(name, breed) {
    super(name);
    this.breed = breed;
  }

  bark() {
    console.log(`${this.name} –ª–∞–µ—Ç`);
  }
}

const dog = new Dog("–®–∞—Ä–∏–∫", "—Å–ø–∞–Ω–∏–µ–ª—å");
dog.speak();       // –®–∞—Ä–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç
dog.bark();        // –®–∞—Ä–∏–∫ –ª–∞–µ—Ç

-----------------------------------------------------------------------------------------------------------------------------------

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: –ü—Ä–æ–º–∏—Å—ã, Async/Await, –¢–∞–π–º–µ—Ä—ã
–ü—Ä–æ–º–∏—Å—ã:


const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"), 2000);
});

promise.then(data => {
  console.log(data); // –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
}).catch(error => {
  console.error(error);
});
Async/Await:


async function fetchData() {
  try {
    const response = await fetch('https://example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}

fetchData();
–¢–∞–π–º–µ—Ä—ã:


setTimeout(() => {
  console.log("–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã");
}, 2000);

let count = 0;
const interval = setInterval(() => {
  console.log(count++);
  if (count >= 5) clearInterval(interval);
}, 1000);

-----------------------------------------------------------------------------------------------------------------------------------

–ü–õ–ê–ù –ò–ó–£–ß–ï–ù–ò–Ø:


–î–µ–Ω—å 1: –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ —Ä–∞–±–æ—Ç–∞ —Å DOM
1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (1 —á–∞—Å)
let, const, var (—Ä–∞–∑–ª–∏—á–∏—è)
–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: number, string, boolean, null, undefined, object, symbol
–û–ø–µ—Ä–∞—Ç–æ—Ä—ã: –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π —Å–∫—Ä–∏–ø—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å (console.log).

2. –£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —Ü–∏–∫–ª—ã (1.5 —á–∞—Å–∞)
if / else / switch
–¶–∏–∫–ª—ã for, while, do-while
–†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (forEach, map)
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100, –∑–∞–º–µ–Ω—è—è —á–∏—Å–ª–∞, –∫—Ä–∞—Ç–Ω—ã–µ 3, –Ω–∞ "Fizz", –∞ –∫—Ä–∞—Ç–Ω—ã–µ 5 ‚Äî –Ω–∞ "Buzz".

3. –§—É–Ω–∫—Ü–∏–∏ (1.5 —á–∞—Å–∞)
–û–±—ä—è–≤–ª–µ–Ω–∏–µ (function declaration, function expression, arrow functions)
–ü–µ—Ä–µ–¥–∞—á–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–π
–ö–æ–ª–±—ç–∫–∏, –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª.

4. –†–∞–±–æ—Ç–∞ —Å DOM (–æ—Å–Ω–æ–≤—ã) (2 —á–∞—Å–∞)
document.querySelector(), getElementById()
–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç–∏–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
–°–æ–±—ã—Ç–∏—è (click, input, keydown)
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏.

–î–µ–Ω—å 2: –†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, –º–∞—Å—Å–∏–≤–∞–º–∏, —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
1. –û–±—ä–µ–∫—Ç—ã –∏ –∏—Ö –º–µ—Ç–æ–¥—ã (1.5 —á–∞—Å–∞)
–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ {}
–ú–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–æ–≤
–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è
this
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" —Å –º–µ—Ç–æ–¥–∞–º–∏ sayHello(), changeName().

2. –†–∞–±–æ—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (–º–µ—Ç–æ–¥—ã map, filter, reduce) (1.5 —á–∞—Å–∞)
push, pop, shift, unshift
map(), filter(), reduce()
find(), some(), every()
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: –∏–∑ –º–∞—Å—Å–∏–≤–∞ [1, 2, 3, 4, 5] –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —á–∏—Å–µ–ª.

3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: setTimeout, setInterval, fetch (2 —á–∞—Å–∞)
setTimeout(), setInterval()
–ü—Ä–æ–º–∏—Å—ã (Promise, then, catch)
Async/Await
fetch() ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
üëâ –ü—Ä–∞–∫—Ç–∏–∫–∞: —Å–¥–µ–ª–∞—Ç—å fetch() –∑–∞–ø—Ä–æ—Å –Ω–∞ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://jsonplaceholder.typicode.com/users) –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

4. –ú–∏–Ω–∏-–ø—Ä–æ–µ–∫—Ç –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ (2 —á–∞—Å–∞)
üîπ –ò–¥–µ—è: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç".

–ù–∞ –∫–Ω–æ–ø–∫–µ "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É" –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ API
–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –µ—ë –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
–ú–µ–Ω—è—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–ª–∏–∫–µ
