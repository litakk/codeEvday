/* CSS: Основы и ключевые концепции для Junior Frontend Developer */

/* CSS отвечает за стилизацию веб-страниц: */
/* Цвета, Шрифты, Расположение элементов, Анимации. */

/* --- Основы синтаксиса CSS --- */

/* Анатомия правила CSS: */
/* selector { property: value; } */
p {
   color: red; /* Свойство: Значение */
}

/* --- Виды селекторов --- */

/* 1. Селектор элемента: p {} */
/* 2. Селектор ID: #my-id {} */
/* 3. Селектор класса: .my-class {} */
/* 4. Селектор атрибута: img[src] {} */
/* 5. Псевдоклассы: a:hover {} */
/* 6. Псевдоэлементы: p::after {} */
/* 7. Комбинаторы: */
p > span { /* Только span внутри p */ }
p + span { /* span сразу после p */ }

/* --- Шрифты и текст --- */

body {
   font-family: 'Roboto', sans-serif; /* Подключение шрифтов */
   font-size: 16px; /* Размер текста */
   line-height: 1.5; /* Межстрочный интервал */
   text-align: center; /* Выравнивание текста */
   color: #333; /* Цвет текста */
}

/* --- Box Model (Блочная модель) --- */

/* Каждый элемент состоит из: content, padding, border, margin */
.box {
   width: 200px;
   padding: 10px;
   border: 1px solid #ccc;
   margin: 20px;
   box-sizing: border-box; /* Включает границы и отступы в размеры элемента */
}

/* --- Позиционирование --- */

/* Способы позиционирования элементов: */
.element {
   position: relative; /* Смещение относительно исходного положения */
   top: 10px;
   left: 20px;
}
.fixed {
   position: fixed; /* Фиксация относительно окна браузера */
   bottom: 0;
   right: 0;
}

/* --- Flexbox --- */

/* Для управления расположением элементов */
.flex-container {
   display: flex;
   justify-content: space-between; /* Распределение по горизонтали */
   align-items: center; /* Выравнивание по вертикали */
   flex-wrap: wrap; /* Перенос строк */
}
.flex-item {
   flex: 1; /* Гибкость элемента */
   margin: 10px;
}

/* --- Grid Layout --- */

/* Сетка для сложных макетов */
.grid-container {
   display: grid;
   grid-template-columns: repeat(3, 1fr); /* Три колонки одинаковой ширины */
   gap: 10px; /* Расстояние между ячейками */
}
.grid-item {
   background-color: #f0f0f0;
   padding: 20px;
   text-align: center;
}

/* --- Адаптивность (Media Queries) --- */

/* Изменение стилей для маленьких экранов */
@media (max-width: 600px) {
   .flex-container {
       flex-direction: column; /* Элементы в колонку */
   }
}

/* --- Анимации и переходы --- */

/* Анимация через keyframes */
@keyframes fade-in {
   from { opacity: 0; }
   to { opacity: 1; }
}
.animated {
   animation: fade-in 1s ease-in;
}

/* Плавные переходы */
.button {
   transition: background-color 0.3s ease;
}
.button:hover {
   background-color: #2ecc71;
}

/* --- Переменные CSS --- */

/* Упрощают управление цветами и другими повторяющимися значениями */
:root {
   --main-color: #3498db;
}
h1 {
   color: var(--main-color);
}

/* --- Тени и трансформации --- */

.box-shadow {
   box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); /* Тень у блока */
}
.text-shadow {
   text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5); /* Тень у текста */
}
.scale:hover {
   transform: scale(1.1); /* Увеличение при наведении */
}

/* Список вопросов и ответов для собеседования junior frontend developer: */

/* 1. Что такое CSS и для чего он используется? */
/* Ответ: CSS (Cascading Style Sheets) используется для стилизации веб-страниц, управления цветами, шрифтами, макетами, анимациями и другими визуальными эффектами. */

/* 2. Что такое блочная модель CSS (Box Model)? */
/* Ответ: Блочная модель включает в себя контент, внутренний отступ (padding), границу (border) и внешний отступ (margin). Это структура, которая определяет, как элемент занимает место на странице. */

/* 3. Какие есть основные типы селекторов в CSS? */
/* Ответ:
   - Селектор элемента (например, p)
   - Селектор класса (.class)
   - Селектор ID (#id)
   - Селектор атрибута ([attr])
   - Псевдоклассы (:hover, :focus)
   - Псевдоэлементы (::before, ::after)
   - Комбинаторы (например, p > span) */

/* 4. В чём разница между relative, absolute, fixed и sticky позиционированием? */
/* Ответ:
   - relative: Смещает элемент относительно его нормального положения.
   - absolute: Смещает элемент относительно ближайшего предка с заданным position, отличным от static.
   - fixed: Закрепляет элемент относительно окна браузера, игнорируя прокрутку.
   - sticky: Ведёт себя как relative, пока не достигает заданного смещения, после чего закрепляется как fixed. */

/* 5. Что такое псевдоклассы и псевдоэлементы? */
/* Ответ:
   - Псевдоклассы добавляют состояние элементу, например :hover, :focus.
   - Псевдоэлементы добавляют стилизацию к частям элемента, например ::before, ::after. */

/* 6. Как работают медиазапросы? */
/* Ответ: Медиазапросы адаптируют стили под определённые размеры экрана или устройства, используя директиву @media. */

/* 7. Что такое Flexbox и для чего он используется? */
/* Ответ: Flexbox — это модель расположения элементов, которая обеспечивает гибкое выравнивание и распределение элементов в одном измерении (по строке или столбцу). Используется для создания адаптивных и сложных макетов. */

/* 8. Как работает CSS Grid? */
/* Ответ: CSS Grid — это система для создания макетов, которая позволяет выравнивать элементы по сетке с использованием строк и столбцов. Она используется для сложных макетов, которые требуют управления как по горизонтали, так и по вертикали. */

/* 9. Чем отличаются "em", "rem" и "px"? */
/* Ответ:
   - px: фиксированная единица, основанная на пикселях экрана.
   - em: относительная единица, основанная на размере шрифта родительского элемента.
   - rem: относительная единица, основанная на размере шрифта корневого элемента (html). */

/* 10. Что такое z-index и как он работает? */
/* Ответ: z-index управляет наложением элементов по оси Z (вперёд/назад). Элементы с большим z-index отображаются поверх элементов с меньшим z-index. */

/* 11. Как добавить пользовательский шрифт в проект? */
/* Ответ: Используйте @font-face для локального шрифта или подключите шрифты из Google Fonts с помощью <link> в <head>. */

/* 12. Как сделать элемент центрированным в CSS? */
/* Ответ:
   - Для текста: text-align: center;
   - Для блоков: margin: auto; или использование flexbox/grid. */

/* 13. Чем отличается "visibility: hidden" от "display: none"? */
/* Ответ:
   - visibility: hidden; делает элемент невидимым, но сохраняет место на странице.
   - display: none; полностью удаляет элемент из потока, освобождая занимаемое пространство. */

/* 14. Что такое переменные CSS? */
/* Ответ: Переменные CSS позволяют переопределять значения в коде для удобства. Они задаются через --имя-переменной и вызываются через var(--имя-переменной). */

/* 15. Какие современные подходы для создания макетов вы знаете? */
/* Ответ:
   - Flexbox: Для выравнивания элементов в одном направлении.
   - Grid Layout: Для создания сложных сеточных макетов. */

/* 16. Как создать анимацию в CSS? */
/* Ответ: Используйте ключевые кадры через @keyframes и свойство animation для применения анимации к элементу. */

/* 17. Что такое transition? */
/* Ответ: Transition добавляет плавность при изменении свойств. Пример: transition: all 0.3s ease-in-out;. */

/* 18. Как защитить стили от конфликта в большом проекте? */
/* Ответ: Используйте методологии вроде BEM (Block Element Modifier) или инкапсуляцию стилей через Shadow DOM. */

/* 19. В чём разница между inline, block и inline-block? */
/* Ответ:
   - inline: Элементы не занимают всю ширину и не допускают отступов.
   - block: Элементы занимают всю ширину и допускают отступы.
   - inline-block: Комбинация обоих: элемент в строке, но с отступами. */

/* 20. Как отладить CSS? */
/* Ответ:
   - Используйте браузерные инструменты разработчика (DevTools).
   - Проверяйте и экспериментируйте с изменениями стилей в реальном времени. */