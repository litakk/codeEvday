‚úÖ –ß–∞—Å—Ç—å 0. JavaScript (–æ—Å–Ω–æ–≤–∞)

1. Theme: Data Types in JavaScript
üá∑üá∫ –í JavaScript —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 8 —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:

string ‚Äî —Å—Ç—Ä–æ–∫–∞

number ‚Äî —á–∏—Å–ª–æ

boolean ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (true/false)

null ‚Äî "–ø—É—Å—Ç–æ–µ" –∑–Ω–∞—á–µ–Ω–∏–µ

undefined ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ

symbol ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

bigint ‚Äî –±–æ–ª—å—à–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

object ‚Äî –æ–±—ä–µ–∫—Ç (–≤–∫–ª—é—á–∞–µ—Ç –º–∞—Å—Å–∏–≤—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç.–¥.)


üá¨üáß There are 8 data types in JavaScript:

string ‚Äî a text

number ‚Äî a numeric value

boolean ‚Äî true or false

null ‚Äî value is set to nothing on purpose

undefined ‚Äî variable is declared but not assigned

symbol ‚Äî unique identifier

bigint ‚Äî large integer

object ‚Äî An object is a collection of key-value pairs.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

2. Theme: let vs const vs var
üá∑üá∫

let ‚Äî –±–ª–æ—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ

const ‚Äî –±–ª–æ—á–Ω–∞—è, –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ

var ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∏–π, –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è

üá¨üáß

let ‚Äî block-scoped, value can be changed

const ‚Äî block-scoped, value cannot be changed

var ‚Äî outdated, function-scoped

let a = 1;
const b = 2;
var c = 3;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

3. Theme: null vs undefined
üá∑üá∫

undefined ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∞, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ

null ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –∫–∞–∫ "–Ω–∏—á–µ–≥–æ"

üá¨üáß

undefined ‚Äî variable is declared but not assigned

null ‚Äî value is set to nothing on purpose

let x;        // undefined
let y = null; // null

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

4. Theme: Hoisting
üá∑üá∫
Hoisting (–ø–æ–¥–Ω—è—Ç–∏–µ) ‚Äî —ç—Ç–æ –º–µ—Ö–∞–Ω–∏–∑–º, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è var –∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –≤–≤–µ—Ä—Ö —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏. let –∏ const —Ç–æ–∂–µ –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è, –Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è.

üá¨üáß
Hoisting is a behavior where var and function declarations are moved to the top of their scope. let and const are hoisted too, but not initialized.

console.log(a); // undefined
var a = 5;

console.log(b); // ReferenceError
let b = 10;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

5. Theme: Truthy and Falsy
üá∑üá∫
Falsy –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ false –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:
false, 0, "", null, undefined, NaN.
–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî truthy (–∏—Å—Ç–∏–Ω–Ω—ã–µ).

üá¨üáß
Falsy values are interpreted as false in logical expressions:
false, 0, "", null, undefined, NaN.
Everything else is truthy.

if (0) console.log("Falsy");
if (1) console.log("Truthy"); // –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

6. Theme: == vs ===
üá∑üá∫
== —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã.
=== —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏ —Ç–∏–ø, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ).

üá¨üáß
== compares values and changes types if needed.
=== compares value and type, no changes.

üîπ == ‚Äî "double equals"
üîπ === ‚Äî "triple equals"

"5" == 5  // true
"5" === 5 // false

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

7. Theme: Function Declaration vs Expression
üá∑üá∫
Function Declaration ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è (hoisting).
Function Expression ‚Äî –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è.

üá¨üáß
Function Declaration is hoisted.
Function Expression is not hoisted.

// Declaration
function sayHi() {
  console.log("Hi");
}

// Expression
const sayHello = function () {
  console.log("Hello");
};

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

8. Theme: Arrow Function
üá∑üá∫
–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: () => {}
–ù–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ this, –±–µ—Ä—ë—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

üá¨üáß
Arrow function is a shorter syntax: () => {}
It doesn‚Äôt have its own this, uses the outer context.

const add = (a, b) => a + b;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

9. Theme: Callback Function
üá∑üá∫
Callback ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ–º–∞—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë.

üá¨üáß
Callback is a function passed to another function and executed inside it.

function greet(name, callback) {
  callback(`Hello, ${name}`);
}
greet("Tom", console.log);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

10. Theme: for, while, forEach
üá∑üá∫

for ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª

while ‚Äî –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ

forEach ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ (–Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è)

üá¨üáß

for ‚Äî universal loop

while ‚Äî runs while condition is true

forEach ‚Äî iterates over array elements (can‚Äôt break)

for (let i = 0; i < 3; i++) console.log(i);
while (i < 3) console.log(i++);
[1, 2, 3].forEach(num => console.log(num));

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

11. Theme: Object
üá∑üá∫
–û–±—ä–µ–∫—Ç ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.

üá¨üáß
An object is a collection of key-value pairs.

const user = { name: "Tom", age: 18 };

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

12. Theme: Array
üá∑üá∫
–ú–∞—Å—Å–∏–≤ ‚Äî —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.

üá¨üáß
An array is an ordered list of values.

const numbers = [1, 2, 3];

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

13. Theme: Array Methods
üá∑üá∫
–ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤:

–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ: push, pop, shift, unshift

–ü–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–µ: map, filter, forEach, reduce

üá¨üáß
Array methods:

Mutating: push, pop, shift, unshift

Iterating: map, filter, forEach, reduce

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

14. Theme: map() vs forEach()
üá∑üá∫

forEach ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é

map ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤

üá¨üáß

forEach just runs a function

map returns a new array

[1, 2, 3].map(x => x * 2);     // [2, 4, 6]
[1, 2, 3].forEach(x => x * 2); // –Ω–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω—ë—Ç

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

15. Theme: Spread Operator
üá∑üá∫
–û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (...) –∫–æ–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞.

üá¨üáß
The spread operator (...) copies array elements or object properties.

const arr = [1, 2];
const copy = [...arr];

const obj = { a: 1 };
const clone = { ...obj };

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 




- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

‚úÖ –ß–∞—Å—Ç—å 1. React (–æ—Å–Ω–æ–≤–∞)

Theme: JSX
üá∑üá∫ JSX ‚Äî —ç—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å HTML-–ø–æ–¥–æ–±–Ω—ã–π –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ JavaScript. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ React –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
üá¨üáß JSX is a syntax that lets you write HTML-like code inside JavaScript. It is used in React to describe the UI.

const App = () => <h1>Hello, world!</h1>;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Components
üá∑üá∫ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSX. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞—Å—Ç–∏.
üá¨üáß Components are functions that return JSX. They let you split the UI into small parts.

function Welcome() {
  return <p>Welcome to my app</p>;
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Props
üá∑üá∫ –ü—Ä–æ–ø—Å—ã ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ –¥–æ—á–µ—Ä–Ω–µ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.
üá¨üáß Props are a way to pass data from a parent to a child component.

function Greeting(props) {
  return <h1>Hello, {props.name}</h1>;
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useState
üá∑üá∫ useState ‚Äî —ç—Ç–æ —Ö—É–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ.
üá¨üáß useState is a hook that lets you store and update state in a component.

const [count, setCount] = useState(0);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useEffect
üá∑üá∫ useEffect ‚Äî —ç—Ç–æ —Ö—É–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–π–º–µ—Ä—ã –∏ —Ç.–ø.
üá¨üáß useEffect is a hook to run side effects like data loading, timers.

useEffect(() => {
  console.log('Component mounted');
}, []);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Conditional Rendering
üá∑üá∫ React –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º.
üá¨üáß React lets you render elements based on a condition.

{isLoggedIn ? <Dashboard /> : <Login />}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Lists and Keys
üá∑üá∫ –°–ø–∏—Å–∫–∏ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è —á–µ—Ä–µ–∑ .map(), key –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
üá¨üáß Lists are rendered using .map(), and key helps React update them faster.

items.map(item => <li key={item.id}>{item.name}</li>)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Forms and Events
üá∑üá∫ –§–æ—Ä–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ onChange, onSubmit.
üá¨üáß Forms are handled using onChange, onSubmit.

<input value={text} onChange={e => setText(e.target.value)} />

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useRef
üá∑üá∫ useRef –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ DOM –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞.
üá¨üáß useRef lets you access DOM or store values without re-render.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useContext
üá∑üá∫ useContext –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è props –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ.
üá¨üáß useContext lets you pass data without props at every level.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Component Lifecycle (—Ñ–∞–∑—ã –∂–∏–∑–Ω–∏)
üá∑üá∫ –í —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö useEffect –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã (componentDidMount, componentDidUpdate).
üá¨üáß In functional components, useEffect replaces old lifecycle methods like componentDidMount.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 





- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

‚úÖ –ß–∞—Å—Ç—å 2. Next.js (–æ—Å–Ω–æ–≤–∞)

Theme: What is Next.js?
üá∑üá∫ Next.js ‚Äî —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –ø–æ–≤–µ—Ä—Ö React. –û–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç SSR (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥), –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.
üá¨üáß Next.js is a framework on top of React. It adds SSR (server-side rendering), routing, and optimization.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: File-based Routing
üá∑üá∫ –í Next.js –∫–∞–∂–¥–∞—è –ø–∞–ø–∫–∞ –∏ —Ñ–∞–π–ª –≤ app/ –∏–ª–∏ pages/ ‚Äî —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç.
üá¨üáß In Next.js, every folder and file in app/ or pages/ is a route.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Server Components vs Client Components
üá∑üá∫ Server –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. Client ‚Äî –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
üá¨üáß Server components run on the server. Client components run in the browser.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: API Routes
üá∑üá∫ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ API –ø—Ä—è–º–æ –≤ Next.js (–≤ –ø–∞–ø–∫–µ api).
üá¨üáß You can create your own API in Next.js (in the api folder).

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Static Generation vs Server-side Rendering
üá∑üá∫ Static ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –±–∏–ª–¥–µ. Server-side ‚Äî –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å.
üá¨üáß Static means page is built at build time. Server-side means on every request.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useRouter()
üá∑üá∫ –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏.
üá¨üáß A hook to manage routes.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 





- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

‚úÖ –ß–∞—Å—Ç—å 3. TypeScript (–≤ React)

Theme: –ó–∞—á–µ–º –Ω—É–∂–µ–Ω TypeScript?
üá∑üá∫ TypeScript –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –Ω–µ —Ç–æ—Ç —Ç–∏–ø.
üá¨üáß TypeScript helps avoid bugs. It shows when you pass a wrong type.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è props –∏ state
üá∑üá∫ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
üá¨üáß You can define what types a component accepts.

type Props = {
  name: string;
};

const Hello = ({ name }: Props) => <h1>Hello, {name}</h1>;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è useState
const [count, setCount] = useState<number>(0);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
const greet = (name: string): void => {
  console.log('Hello', name);
};

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {};

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è useRef
const inputRef = useRef<HTMLInputElement>(null);