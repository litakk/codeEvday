‚úÖ –ß–∞—Å—Ç—å 1. React (–æ—Å–Ω–æ–≤–∞)

Theme: JSX
üá∑üá∫ JSX ‚Äî —ç—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å HTML-–ø–æ–¥–æ–±–Ω—ã–π –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ JavaScript. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ React –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
üá¨üáß JSX is a syntax that lets you write HTML-like code inside JavaScript. It is used in React to describe the UI.

const App = () => <h1>Hello, world!</h1>;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Components
üá∑üá∫ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSX. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞—Å—Ç–∏.
üá¨üáß Components are functions that return JSX. They let you split the UI into small parts.

function Welcome() {
  return <p>Welcome to my app</p>;
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Props
üá∑üá∫ –ü—Ä–æ–ø—Å—ã ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ –¥–æ—á–µ—Ä–Ω–µ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.
üá¨üáß Props are a way to pass data from a parent to a child component.

function Greeting(props) {
  return <h1>Hello, {props.name}</h1>;
}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useState
üá∑üá∫ useState ‚Äî —ç—Ç–æ —Ö—É–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ.
üá¨üáß useState is a hook that lets you store and update state in a component.

const [count, setCount] = useState(0);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useEffect
üá∑üá∫ useEffect ‚Äî —ç—Ç–æ —Ö—É–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–π–º–µ—Ä—ã –∏ —Ç.–ø.
üá¨üáß useEffect is a hook to run side effects like data loading, timers.

useEffect(() => {
  console.log('Component mounted');
}, []);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Conditional Rendering
üá∑üá∫ React –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É—Å–ª–æ–≤–∏—è–º.
üá¨üáß React lets you render elements based on a condition.

{isLoggedIn ? <Dashboard /> : <Login />}

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Lists and Keys
üá∑üá∫ –°–ø–∏—Å–∫–∏ —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è —á–µ—Ä–µ–∑ .map(), key –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
üá¨üáß Lists are rendered using .map(), and key helps React update them faster.

items.map(item => <li key={item.id}>{item.name}</li>)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Forms and Events
üá∑üá∫ –§–æ—Ä–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ onChange, onSubmit.
üá¨üáß Forms are handled using onChange, onSubmit.

<input value={text} onChange={e => setText(e.target.value)} />

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useRef
üá∑üá∫ useRef –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ DOM –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∞.
üá¨üáß useRef lets you access DOM or store values without re-render.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useContext
üá∑üá∫ useContext –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—è props –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ.
üá¨üáß useContext lets you pass data without props at every level.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Component Lifecycle (—Ñ–∞–∑—ã –∂–∏–∑–Ω–∏)
üá∑üá∫ –í —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö useEffect –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã (componentDidMount, componentDidUpdate).
üá¨üáß In functional components, useEffect replaces old lifecycle methods like componentDidMount.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 





- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

‚úÖ –ß–∞—Å—Ç—å 2. Next.js (–æ—Å–Ω–æ–≤–∞)

Theme: What is Next.js?
üá∑üá∫ Next.js ‚Äî —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –ø–æ–≤–µ—Ä—Ö React. –û–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç SSR (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥), –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.
üá¨üáß Next.js is a framework on top of React. It adds SSR (server-side rendering), routing, and optimization.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: File-based Routing
üá∑üá∫ –í Next.js –∫–∞–∂–¥–∞—è –ø–∞–ø–∫–∞ –∏ —Ñ–∞–π–ª –≤ app/ –∏–ª–∏ pages/ ‚Äî —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç.
üá¨üáß In Next.js, every folder and file in app/ or pages/ is a route.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Server Components vs Client Components
üá∑üá∫ Server –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. Client ‚Äî –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
üá¨üáß Server components run on the server. Client components run in the browser.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: API Routes
üá∑üá∫ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ API –ø—Ä—è–º–æ –≤ Next.js (–≤ –ø–∞–ø–∫–µ api).
üá¨üáß You can create your own API in Next.js (in the api folder).

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: Static Generation vs Server-side Rendering
üá∑üá∫ Static ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –±–∏–ª–¥–µ. Server-side ‚Äî –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å.
üá¨üáß Static means page is built at build time. Server-side means on every request.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: useRouter()
üá∑üá∫ –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏.
üá¨üáß A hook to manage routes.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 





- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

‚úÖ –ß–∞—Å—Ç—å 3. TypeScript (–≤ React)

Theme: –ó–∞—á–µ–º –Ω—É–∂–µ–Ω TypeScript?
üá∑üá∫ TypeScript –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –≥–¥–µ —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –Ω–µ —Ç–æ—Ç —Ç–∏–ø.
üá¨üáß TypeScript helps avoid bugs. It shows when you pass a wrong type.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è props –∏ state
üá∑üá∫ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
üá¨üáß You can define what types a component accepts.

type Props = {
  name: string;
};

const Hello = ({ name }: Props) => <h1>Hello, {name}</h1>;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è useState
const [count, setCount] = useState<number>(0);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
const greet = (name: string): void => {
  console.log('Hello', name);
};

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {};

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Theme: –¢–∏–ø–∏–∑–∞—Ü–∏—è useRef
const inputRef = useRef<HTMLInputElement>(null);

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
