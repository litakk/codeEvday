‚úÖ –ß–∞—Å—Ç—å 0. JavaScript (–æ—Å–Ω–æ–≤–∞)

üá∑üá∫ –í JavaScript —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 8 —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:
7 –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö: string, number, bigint, boolean, undefined, null, symbol
1 —Å—Å—ã–ª–æ—á–Ω—ã–π: object (–≤–∫–ª—é—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã, –º–∞—Å—Å–∏–≤—ã, —Ñ—É–Ω–∫—Ü–∏–∏)

üá¨üáß There are 8 data types in JavaScript:
7 primitive: string, number, bigint, boolean, undefined, null, symbol
1 reference: object (includes objects, arrays, functions)

2. Theme: let vs const vs var  
üá∑üá∫ let ‚Äî –±–ª–æ—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ; const ‚Äî –±–ª–æ—á–Ω–∞—è, –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ; var ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∏–π, –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è.  
üá¨üáß let ‚Äî block-scoped, value can be changed; const ‚Äî block-scoped, value cannot be changed; var ‚Äî outdated, function-scoped.

3. Theme: null vs undefined  
üá∑üá∫ undefined ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∞, –Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ; null ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –∫–∞–∫ "–Ω–∏—á–µ–≥–æ".  
üá¨üáß undefined ‚Äî variable is declared but not assigned; null ‚Äî value is set to nothing on purpose.

4. Theme: Hoisting  
üá∑üá∫ Hoisting (–ø–æ–¥–Ω—è—Ç–∏–µ) ‚Äî –æ–±—ä—è–≤–ª–µ–Ω–∏—è var –∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –≤–≤–µ—Ä—Ö –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏. let –∏ const —Ç–æ–∂–µ –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è, –Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è.  
üá¨üáß Hoisting is a behavior where var and function declarations are moved to the top of their scope. let and const are hoisted too, but not initialized.

5. Theme: Truthy and Falsy  
üá∑üá∫ Falsy –∑–Ω–∞—á–µ–Ω–∏—è: false, 0, "", null, undefined, NaN. –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî truthy.  
üá¨üáß Falsy values: false, 0, "", null, undefined, NaN. Everything else is truthy.

6. Theme: == vs ===  
üá∑üá∫ == —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã; === —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏ —Ç–∏–ø, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ.  
üá¨üáß == compares values and changes types if needed; === compares value and type.

7. Theme: Function Declaration vs Expression  
üá∑üá∫ Function Declaration ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è; Function Expression ‚Äî –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è.  
üá¨üáß Function Declaration is hoisted; Function Expression is not hoisted.

8. Theme: Arrow Function  
üá∑üá∫ –°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ this.  
üá¨üáß Arrow function ‚Äî shorter syntax, no own this.

9. Theme: Callback Function  
üá∑üá∫ Callback ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –≤ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ–º–∞—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë.  
üá¨üáß Callback ‚Äî function passed to another function and executed inside it.

10. Theme: for, while, forEach  
üá∑üá∫ for ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª; while ‚Äî –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ; forEach ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞.  
üá¨üáß for ‚Äî universal loop; while ‚Äî runs while condition is true; forEach ‚Äî iterates over array elements.

11. Theme: Object  
üá∑üá∫ –û–±—ä–µ–∫—Ç ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ.  
üá¨üáß Object ‚Äî collection of key-value pairs.

12. Theme: Array  
üá∑üá∫ –ú–∞—Å—Å–∏–≤ ‚Äî —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.  
üá¨üáß Array ‚Äî ordered list of values.

13. Theme: Array Methods  
üá∑üá∫ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ: push, pop, shift, unshift; –ü–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–µ: map, filter, forEach, reduce.  
üá¨üáß Mutating: push, pop, shift, unshift; Iterating: map, filter, forEach, reduce.

14. Theme: map() vs forEach()  
üá∑üá∫ forEach ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é; map ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.  
üá¨üáß forEach just runs a function; map returns a new array.

15. Theme: Spread Operator  
üá∑üá∫ –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (...) –∫–æ–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞.  
üá¨üáß Spread operator (...) copies array elements or object properties.

---

‚úÖ –ß–∞—Å—Ç—å 1. JavaScript (start middle)

16. Theme: Error Handling  
üá∑üá∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ try/catch, finally, throw.  
üá¨üáß Error handling with try/catch, finally, throw.

```js
try {
  // code
} catch (e) {
  console.error(e);
} finally {
  // always runs
}
```

17. Theme: Working with API (fetch, axios)  
üá∑üá∫ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏—Å–ø–æ–ª—å–∑—É—é—Ç fetch –∏–ª–∏ axios.  
üá¨üáß Use fetch or axios to work with APIs.

```js
// fetch
fetch(url)
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));

// axios
import axios from 'axios';
axios.get(url)
  .then(res => console.log(res.data))
  .catch(err => console.error(err));
```

18. Theme: Promise & async/await  
üá∑üá∫ Promise ‚Äî –æ–±—ä–µ–∫—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π; async/await ‚Äî —É–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Promise.  
üá¨üáß Promise ‚Äî object for async operations; async/await ‚Äî convenient syntax for Promise.

```js
const fetchData = async () => {
  try {
    const res = await fetch(url);
    const data = await res.json();
    return data;
  } catch (e) {
    console.error(e);
  }
};
```

19. Theme: Closure  
üá∑üá∫ –ó–∞–º—ã–∫–∞–Ω–∏–µ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è "–ø–æ–º–Ω–∏—Ç" –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.  
üá¨üáß Closure ‚Äî function that "remembers" its creation context.

```js
function outer() {
  let count = 0;
  return function() { count++; return count; }
}
```

20. Theme: Scope  
üá∑üá∫ –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ ‚Äî –≥–¥–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è, –±–ª–æ—á–Ω–∞—è, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è).  
üá¨üáß Scope ‚Äî where variables are accessible (global, block, function).

21. Theme: Event Loop & Call Stack  
üá∑üá∫ Event Loop ‚Äî –º–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á; Call Stack ‚Äî —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π.  
üá¨üáß Event Loop ‚Äî mechanism for handling async tasks; Call Stack ‚Äî stack of function calls.

---

‚úÖ –ß–∞—Å—Ç—å 2. –û–û–ü –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

22. Theme: Class & Inheritance  
üá∑üá∫ –ö–ª–∞—Å—Å ‚Äî —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤; –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.  
üá¨üáß Class ‚Äî template for creating objects; inheritance ‚Äî ability to extend functionality.

```js
class Animal {
  constructor(name) { this.name = name; }
  speak() { console.log(`${this.name} speaks`); }
}
class Dog extends Animal {
  speak() { console.log(`${this.name} barks`); }
}
```

23. Theme: SOLID Principles  
üá∑üá∫ SOLID ‚Äî 5 –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.  
üá¨üáß SOLID ‚Äî 5 design principles: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.

24. Theme: Design Patterns  
üá∑üá∫ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: Singleton, Observer, Factory, Module.  
üá¨üáß Design patterns: Singleton, Observer, Factory, Module.

---

‚úÖ –ß–∞—Å—Ç—å 3. React (–æ—Å–Ω–æ–≤–∞ –∏ middle)

25. Theme: JSX  
üá∑üá∫ JSX ‚Äî —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è UI –≤ React.  
üá¨üáß JSX ‚Äî syntax for describing UI in React.


26. Theme: Component Lifecycle  
üá∑üá∫ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: mounting, updating, unmounting (useEffect, componentDidMount –∏ –¥—Ä.).  
üá¨üáß Component lifecycle: mounting, updating, unmounting (useEffect, componentDidMount, etc.).

27. Theme: Context  
üá∑üá∫ Context ‚Äî –º–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –±–µ–∑ –ø—Ä–æ–ø—Å–æ–≤.  
üá¨üáß Context ‚Äî way to pass data between components without props.

28. Theme: Memoization & Optimization  
üá∑üá∫ –ú–µ–º–æ–∏–∑–∞—Ü–∏—è (React.memo, useMemo, useCallback) ‚Äî –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞.  
üá¨üáß Memoization (React.memo, useMemo, useCallback) ‚Äî render optimization.

29. Theme: Testing (Jest, React Testing Library)  
üá∑üá∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: Jest ‚Äî —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, React Testing Library ‚Äî –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI.  
üá¨üáß Component testing: Jest ‚Äî test framework, React Testing Library ‚Äî for UI testing.

```js
// Jest
test('adds 1 + 2 to equal 3', () => {
  expect(1 + 2).toBe(3);
});

// React Testing Library
import { render, screen } from '@testing-library/react';
render(<Button />);
expect(screen.getByText('Click')).toBeInTheDocument();
```

30. Theme: Prototype & Prototypal Inheritance
üá∑üá∫ –í JavaScript –æ–±—ä–µ–∫—Ç—ã –Ω–∞—Å–ª–µ–¥—É—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã (__proto__). –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç prototype, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
üá¨üáß In JavaScript, objects inherit properties via prototypes (__proto__). Every function has a prototype used for inheritance.

function Animal(name) { this.name = name; }
Animal.prototype.speak = function() { console.log(this.name + " speaks"); };

const dog = new Animal("Rex");
dog.speak(); // Rex speaks

31. Theme: this Binding
üá∑üá∫ this –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–∑–æ–≤–∞:

–≤ –æ–±—ä–µ–∫—Ç–µ ‚Üí —Å–∞–º –æ–±—ä–µ–∫—Ç;

–≤ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Üí –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (–∏–ª–∏ undefined –≤ strict mode);

–≤ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Üí –±–µ—Ä—ë—Ç—Å—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ scope;

–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å –ø–æ–º–æ—â—å—é call, apply, bind.
üá¨üáß this depends on call context:

in object ‚Üí the object;

in function ‚Üí global object (or undefined in strict mode);

in arrow function ‚Üí lexical scope;

can be changed with call, apply, bind.

32. Theme: call, apply, bind
üá∑üá∫ –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è this:

call(thisArg, ...args) ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–∑—É;

apply(thisArg, [args]) ‚Äî —Ç–æ–∂–µ, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤;

bind(thisArg) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º this.
üá¨üáß Methods to control this:

call(thisArg, ...args) ‚Äî invokes immediately;

apply(thisArg, [args]) ‚Äî same but takes array;

bind(thisArg) ‚Äî returns new function with bound this.

33. Theme: Prototype vs Class
üá∑üá∫ –ö–ª–∞—Å—Å—ã –≤ JS ‚Äî —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä –Ω–∞–¥ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞–º–∏. –í–Ω—É—Ç—Ä–∏ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
üá¨üáß Classes in JS are syntactic sugar over prototypes. They still use prototypal inheritance under the hood.

34. Theme: Shallow Copy vs Deep Copy
üá∑üá∫ –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (Object.assign, spread) –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å. –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (JSON.parse(JSON.stringify()), structuredClone) –∫–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏.
üá¨üáß Shallow copy (Object.assign, spread) copies only first level. Deep copy (JSON.parse(JSON.stringify()), structuredClone) copies all levels.

35. Theme: Debounce & Throttle
üá∑üá∫ Debounce ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã. Throttle ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫.
üá¨üáß Debounce ‚Äî function runs only after a pause. Throttle ‚Äî function runs at most once per interval.

36. Theme: Event Delegation
üá∑üá∫ –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –ª–æ–≤–∏–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ—Ç–æ–º–∫–æ–≤ —á–µ—Ä–µ–∑ event.target. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç DOM-—Å–ª—É—à–∞—Ç–µ–ª–∏.
üá¨üáß Attach handler to parent and catch child events via event.target. Optimizes DOM listeners.