// === Изучение JavaScript ===

// === Ссылочный тип - object: [] , {} ===

// Создаём объект objectA
const objectA = {
    a: 10,
    b: true,
};

// Копируем ссылку на objectA в переменную copyOfA
const copyOfA = objectA;

// Изменяем свойства через ссылку
copyOfA.a = 20;
copyOfA.c = "abc";

// Поскольку объекты передаются по ссылке, изменения отразятся на objectA
console.log(objectA); // { a: 20, b: true, c: 'abc' }

// --- --- --- --- --- --- --- --- --- --- --- ---

// === Базовый объект ===
const MyCity = {
    city: "New York",
};

// Добавляем новое свойство
MyCity.popular = true;

console.log(MyCity); // { city: 'New York', popular: true }

// --- --- --- --- --- --- --- --- --- --- --- ---

// === МЕТОДЫ ОБЪЕКТОВ ===

// Создаём объект героя с методами
const hero = {
    name: "Супермен",

    // Метод: герой бежит
    run() {
        console.log(`${this.name} бежит!`);
    },

    // Метод: герой прыгает
    jump() {
        console.log(`${this.name} прыгает!`);
    },

    // Метод: герой атакует
    attack() {
        console.log(`${this.name} атакует врага!`);
    },
};

// Используем методы объекта hero
hero.run();    // "Супермен бежит!"
hero.jump();   // "Супермен прыгает!"
hero.attack(); // "Супермен атакует врага!"

// --- --- --- --- --- --- --- --- --- --- --- ---

// Создаём объект azamat с методами
const azamat = {
    name: "Azamat",

    // Метод: Азамат говорит
    say() {
        console.log(`${this.name} говорит!`);
    },

    // Метод: Азамат выполняет действие
    do() {
        console.log(`${this.name} делает что-то`);
    },
};

// Используем методы объекта azamat
azamat.say(); // "Azamat говорит!"
azamat.do();  // "Azamat делает что-то"

// --- --- --- --- --- --- --- --- --- --- --- ---

const postStringified = JSON.stringify(azamat) // Этот метод преобразует объект азамат в строку формата JSON
console.log(JSON.parse(postStringified))

// 1. Что такое JSON.stringify()?
// Метод JSON.stringify()
// используется для преобразования объекта, массива или значения примитивного типа
// (например, числа, строки, булевого значения) в строку формата JSON. Это удобно
// при необходимости передать данные через сеть или сохранить их в файле.

// 2. Метод JSON.parse() выполняет обратную операцию по сравнению с JSON.stringify():
//  он принимает строку в формате JSON и преобразует её обратно в объект, массив или значение примитивного типа.

// ИТОГ:
// JSON.stringify() отправляет объект, преобразуя его в строку формата JSON.
// JSON.parse() принимает строку в формате JSON и преобразует её обратно в объект.

// --- --- --- --- --- --- --- --- --- --- --- ---

let a = 10

if (a <= 10) {
    console.log("Вам меньше 10 лет")
} else {
    console.log("Доступ разрешён")
}

// --- --- --- --- --- --- --- --- --- --- --- ---

let temperature = 10;

if (temperature > 30) {
    console.log("Жарко");
} else if (temperature > 15) {
    console.log("Тепло");
} else if (temperature > 0) {
    console.log("Прохладно");
} else {
    console.log("Холодно");
}

// --- --- --- --- --- --- --- --- --- --- --- ---  

let variable = "azamat";  // строка с длиной 6 символов

if (variable.length > 7) {  // проверка, если длина строки больше 7
    console.log("не больше 7");
} else if (variable.length > 5) {  // проверка, если длина строки больше 5
    console.log("6 больше чем 5");  // это условие выполнится, так как длина строки 6
} else {  // если ни одно из предыдущих условий не выполнится
    console.log("В итоге не нашел подходящий");
}

// --- --- --- --- --- --- --- --- --- --- --- ---  

//Примитивные типы данных:

// Number — числа(целые и с плавающей точкой): 5, 10.3, -7.
// String — строки(тексты): "Hello", 'World'.
// Boolean — булевы значения, которые могут быть либо true(истина), либо false(ложь).
// Null — специальное значение, которое обозначает отсутствие значения.
// Undefined — значение, которое присваивается переменной по умолчанию, если ей не присвоено другое значение.
// Symbol — уникальные и неизменяемые идентификаторы, которые обычно используются для уникальных ключей в объектах.
// BigInt — позволяет работать с очень большими числами, превышающими диапазон типов Number.
// Объекты — это сложные структуры данных, которые могут содержать различные данные, включая функции и другие объекты.Например, массивы и функции также являются объектами.

// --- --- --- --- --- --- --- --- --- --- --- ---  

let name = String
let age = Number
let bool = Boolean

//  Создайте переменную, которая будет хранить ваш возраст через 5 лет.

let Myage = 18
let MyAge2 = 18 + 5
console.log(MyAge2);

// --- --- --- --- --- --- --- --- --- --- --- ---  

// Сравните свой текущий возраст с 18 с использованием оператора сравнения 
let MyAgeNow = 18
let MyAgeNowCompare = MyAgeNow === 18
console.log(MyAgeNowCompare);

// --- --- --- --- --- --- --- --- --- --- --- ---  

// Создайте объект person с тремя свойствами:
let person = {

    name: "Azamat",
    age: 18,

}

let isAdult = person.age === 18
console.log(isAdult);

// --- --- --- --- --- --- --- --- --- --- --- ---  

// Дополнительное задание (по желанию):

let MyAge = 18 % 2
console.log(MyAge);

// --- --- --- --- --- --- --- --- --- --- --- ---  

// polindrom = madam

let str = "MADAM"

let lowCase = str.toLowerCase()
let reverseStr = lowCase.split('').reverse().join("")
if (lowCase == reverseStr) {
    console.log("Polindrom")
} else {
    console.log("Not Polindrom")
}

// решил задачку сам

// перевести полиндром в функцию

function Полиндром(str) {
    let нижнийРегистр = str.toLowerCase()
    let перевернуть = нижнийРегистр.split('').reverse().join('')

    if (нижнийРегистр == перевернуть) {
        console.log("Это полиндром")
    } else {
        console.log('Не полиндром')
    }
};

// --- --- --- --- --- --- --- --- --- --- --- ---  

// Math.floor() - округляет число в меньшую сторону
// Math.round() - округляет число в большую сторону
// Math.random() - берет рандомное число из заданного целого числа

let h = 1.5
let s = Math.random(h)
console.log(s)

// --- --- --- --- --- --- --- --- --- --- --- ---  

